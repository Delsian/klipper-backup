# This is a placeholder to add all the config checks
# and inits process used in Klippain

[delayed_gcode KLIPPAIN_STARTUP]
initial_duration: 1
gcode:
    _KLIPPAIN_STARTUP


[gcode_macro _KLIPPAIN_STARTUP]
gcode:
    ## Set boot logo
    {% if printer["gcode_macro _USER_VARIABLES"].minidisplay_bootlogo_enabled %}
        _INIT_BOOT_LOGO
    {% endif %}

    # Dump the MCU version to the console for the Klippy log
    _INIT_MCU_VER

    # Check the probe configuration and compatibility with current includes
    _INIT_CHECKPROBECONF

    # If the extruder is running with a TMC2240, there is specific driver registers to set at Klipper startup
    {% set e_driver = printer["gcode_macro _USER_VARIABLES"].e_driver|string %}
    {% if e_driver == "TMC2240" %}
        _INIT_TMC2240
    {% endif %}

    ## Set the startup status LED
    _INIT_LEDS

    # User custom startup process. Define them in your overrides.cfg if needed :)
    _INIT_USERCUSTOM

[gcode_macro _INIT_LEDS]
gcode:
    {% if printer["gcode_macro _USER_VARIABLES"].status_leds_enabled or printer["gcode_macro _USER_VARIABLES"].status_leds_caselight_enabled %}
        {% if printer["gcode_macro _USER_VARIABLES"].caselight_on_at_startup|default(False) %}
            {% if printer["gcode_macro _USER_VARIABLES"].light_enabled %}
                LIGHT_ON
            {% endif %}
            _STATUS_LEDS COLOR="READY"
        {% else %}
            {% if printer["gcode_macro _USER_VARIABLES"].light_enabled %}
                LIGHT_OFF
            {% endif %}
            _STATUS_LEDS COLOR="OFF"
        {% endif %}
    {% endif %}


[gcode_macro _INIT_TMC2240]
gcode:
    # This macro can be copied over to overrides.cfg and will allow the values to be defined automatically on klipper startup
    # TMC2240 extruder initialization macro to set the driver registers based on Esoterical's github page. These settings are not
    # universal and not necessary for all SB2240 owners. Adapt them to your needs!
    # https://github.com/Esoterical/voron_canbus/blob/main/toolhead_flashing/common_hardware/BigTreeTech%20SB2209%20and%20SB2240/SB2240%20Stepper%20Configuration%20and%20Undervoltage.md

    ## Enable accurate stall current measurement
    #SET_TMC_FIELD STEPPER=extruder FIELD=pwm_meas_sd_enable VALUE=1
    #SET_TMC_FIELD STEPPER=extruder FIELD=sg4_filt_en VALUE=1
    ## Set the StealthChop stall detection threshold (may not be completely necessary)
    #SET_TMC_FIELD STEPPER=extruder FIELD=SG4_THRS VALUE=10
    ## Set the hold current to zero, and completely switch off the motor when it is not in use
    #SET_TMC_FIELD STEPPER=extruder FIELD=IHOLD VALUE=0
    #SET_TMC_FIELD STEPPER=extruder FIELD=freewheel VALUE=1
    ## Set the max expected velocity to a value such that we are unlikely to switch to fullstepping except during a very fast retraction or prime
    #SET_TMC_FIELD STEPPER=extruder FIELD=THIGH VELOCITY=50
    ## Use CoolStep, but we need a certain step frequency for it to work
    #SET_TMC_FIELD STEPPER=extruder FIELD=TCOOLTHRS VALUE=4000
    ## But do switch to PWM autotuning when at high flow
    #SET_TMC_FIELD STEPPER=extruder FIELD=TPWMTHRS VELOCITY=1
    ## Allow the motor to freewheel when not in use, means it runs cooler
    #SET_TMC_FIELD STEPPER=extruder FIELD=freewheel VALUE=1
    ## Set the temperature prewarning to something reasonable. Cosmetic, Klipper does nothing with this
    #SET_TMC_FIELD STEPPER=extruder FIELD=OVERTEMPPREWARNING_VTH VALUE=2885 # 7.7 * 100 C + 2038
    ## The following is absolutely critical: set the overvoltage snubber to a sensible voltage.
    ## This should be set to about 0.8 V above your power supply's idle voltage.
    ## Your PSU voltage can be read from the TMC 2240 by issuing a GCODE command:
    ## DUMP_TMC stepper=extruder register=ADC_VSUPPLY_AIN
    ## The voltage is the value of adc_vsupply multiplied by 0.009732
    ## It is also possible to use adc_vsupply + 82 here, which works out to be the same.
    #{% set v = (24.7/0.009732)|int %}
    #SET_TMC_FIELD STEPPER=extruder FIELD=OVERVOLTAGE_VTH VALUE={ v }


[gcode_macro _INIT_CHECKPROBECONF]
gcode:
    {% set probe_type_enabled = printer["gcode_macro _USER_VARIABLES"].probe_type_enabled|string %}
    {% set bed_mesh_enabled = printer["gcode_macro _USER_VARIABLES"].bed_mesh_enabled %}
    {% set qgl_enabled = printer["gcode_macro _USER_VARIABLES"].qgl_enabled %}
    {% set ztilt_enabled = printer["gcode_macro _USER_VARIABLES"].ztilt_enabled %}

    {% if bed_mesh_enabled and probe_type_enabled == "none" %}
        { action_raise_error("You need a to define a probe to be able to perform a bed mesh in Klippain!") }
    {% endif %}

    {% if qgl_enabled and probe_type_enabled == "none" %}
        { action_raise_error("You need a to define a probe to be able to perform a quad gantry leveling in Klippain!") }
    {% endif %}

    {% if ztilt_enabled and probe_type_enabled == "none" %}
        { action_raise_error("You need a to define a probe to be able to perform a Z tilt adjust in Klippain!") }
    {% endif %}


[gcode_macro _INIT_MCU_VER]
gcode:
    {% set parameters = namespace(output = 'Currently configured MCU(s): \n') %}
    {% for name1 in printer %}
        {% for name2 in printer[name1] %}
        {% set show = ['mcu_version'] %}
        {% if name2 is in show %}
            {% set param = "%s: %s" % (name1, printer[name1][name2]) %}
            {% set parameters.output = parameters.output +  param + "\n" %}
        {% endif %}
        {% endfor %}
    {% endfor %}
    {action_respond_info(parameters.output)}

[gcode_macro _INIT_USERCUSTOM]
gcode:
    # ---- CUSTOM Macro section
    # this section is reserved for personal customized user startup
    # in order to use this, create a new macro in your overrides.cfg
    # [gcode_macro _INIT_USERCUSTOM]
    # gcode:
    #   ## Your custom code here
    _INITIALIZE_FROM_DETECTED_TOOL
