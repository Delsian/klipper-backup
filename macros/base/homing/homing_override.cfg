# Homing Override for dockable probe
[homing_override]
axes: xyz
gcode:
    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}
    {% set probe_type_enabled = printer["gcode_macro _USER_VARIABLES"].probe_type_enabled %}
    {% set homing_zhop = printer["gcode_macro _USER_VARIABLES"].homing_zhop|float|abs %}
    {% set homing_travel_speed = printer["gcode_macro _USER_VARIABLES"].homing_travel_speed * 60 %}
    {% set homing_travel_accel = printer["gcode_macro _USER_VARIABLES"].homing_travel_accel %}
    {% set z_drop_speed = printer["gcode_macro _USER_VARIABLES"].z_drop_speed * 60 %}
    {% set status_leds_enabled = printer["gcode_macro _USER_VARIABLES"].status_leds_enabled %}
    {% set bed_mesh_enabled = printer["gcode_macro _USER_VARIABLES"].bed_mesh_enabled %}

    {% set x_homing_backoff, y_homing_backoff = printer["gcode_macro _USER_VARIABLES"].homing_backoff_distance_xy|map('float') %}
    {% set y_safe_position = printer["gcode_macro _USER_VARIABLES"].y_safe_position|float %}

    {% set x_position_endstop = printer["configfile"].config["stepper_x"]["position_endstop"]|float %}
    {% set y_position_endstop = printer["configfile"].config["stepper_y"]["position_endstop"]|float %}
    {% set x_position_center = printer.toolhead.axis_maximum.x|int/2 - printer.toolhead.axis_minimum.x|int/2 %}
    {% set y_position_center = printer.toolhead.axis_maximum.y|int/2 - printer.toolhead.axis_minimum.y|int/2 %}


    {% if probe_type_enabled == "dockable" or probe_type_enabled == "dockable_virtual" %}
        _CHECK_PROBE action=query
    {% endif %}

    # reset parameters
    {% set X, Y, Z = False, False, False %}

    {% if status_leds_enabled %}
        _STATUS_LEDS COLOR="HOMING"
    {% endif %}

    # which axes have been requested for homing
    {% if not 'X' in params
        and not 'Y' in params
        and not 'Z' in params %}

        {% set X, Y, Z = True, True, True %}

    {% else %}
        {% if 'X' in params %}
            {% set X = True %}
        {% endif %}

        {% if 'Y' in params %}
            {% set Y = True %}
        {% endif %}

        {% if 'Z' in params %}
            {% set Z = True %}
        {% endif %}

        {% if 'X' in params
          and 'Y' in params
          and 'Z' in params %}
            # reset homing state variables
            # if homing all axes
            _HOMING_VARIABLES reset=1
         {% endif %}

    {% endif %}

    {% if probe_type_enabled == "dockable" or probe_type_enabled == "dockable_virtual" %}
       _ENTRY_POINT FUNCTION=homing_override
    {% endif %}

    # Set the homing acceleration prior to any movement
    {% set saved_accel = printer.toolhead.max_accel %}
    M204 S{homing_travel_accel}

    {% if bed_mesh_enabled %}
        BED_MESH_CLEAR
    {% endif %}

    G90

    {% if Z %}
        {% if ('z' in printer.toolhead.homed_axes) %}
            {% if (printer.toolhead.position.z < homing_zhop) %}
                {% if verbose %}
                    { action_respond_info("Z too low, performing ZHOP to rehome Z") }
                {% endif %}
                G91
                G0 Z{homing_zhop} F{z_drop_speed}
                M400
                G90
            {% else %}
                {% if verbose %}
                    { action_respond_info("Z already safe, no ZHOP needed to rehome Z") }
                {% endif %}
            {% endif %}
        {% elif ('xy' in printer.toolhead.homed_axes) %}
            {% if verbose %}
                { action_respond_info("X and Y already homed, no ZHOP needed to home Z") }
            {% endif %}
        {% else %}
            {% if verbose %}
                { action_respond_info("X and Y not homed, forcing full G28 to home Z properly") }
            {% endif %}
            SET_KINEMATIC_POSITION X=0 Y=0 Z=0
            G0 Z{homing_zhop} F{z_drop_speed}
            {% set X, Y, Z = True, True, True %}
        {% endif %}
    {% endif %}

    # NEW HOMING SEQUENCE: Always home Y first, then X with specific positioning
    
    # Step 1: Move X axis -5mm to avoid endstop collision (if X or Y homing is requested)
    {% if X or Y %}
        {% if 'x' in printer.toolhead.homed_axes %}
            {% if verbose %}
                { action_respond_info("Moving X -5mm to avoid endstop collision") }
            {% endif %}
            G91
            G0 X-5 F{homing_travel_speed}
            G90
        {% endif %}
    {% endif %}

    # Step 2: Always home Y first (if Y homing requested OR if X homing requested but Y not homed)
    {% if Y or (X and 'y' not in printer.toolhead.homed_axes) %}
        {% if verbose %}
            { action_respond_info("Homing Y first") }
        {% endif %}
        G28 Y0
        G1 Y{y_position_endstop + y_homing_backoff} F{homing_travel_speed}
    {% endif %}

    # Step 3: Set Y to safe position (always do this if X homing is requested)
    {% if Y or X %}
        {% if verbose %}
            { action_respond_info("Moving Y to safe position: " + y_safe_position|string) }
        {% endif %}
        G0 Y{y_safe_position} F{homing_travel_speed}
    {% endif %}

    # Step 4: Home X only when Y is at safe position
    {% if X %}
        {% if verbose %}
            { action_respond_info("Homing X with Y at safe position") }
        {% endif %}
        G28 X0
        G1 X{x_position_endstop + x_homing_backoff} F{homing_travel_speed}
    {% endif %}

    # Home z (unchanged)
    {% if Z %}
        {% if verbose %}
            { action_respond_info("Homing Z") }
        {% endif %}

        # If there is a virtual probe endstop (ie. TAP or inductive as virtual), we go to the center of the bed
        # If the Z endstop is not virtual, then we just move to it
        {% if printer["configfile"].config["stepper_z"]["endstop_pin"]|lower == "probe:z_virtual_endstop" %}
            # If our virtual endstop is a dockable probe, we need to activate it first
            # If it's the voron tap, we put it to a safe temperature
            {% if probe_type_enabled == "dockable_virtual" or probe_type_enabled == "vorontap" %}
                _ACTIVATE_PROBE
            {% endif %}

            # If there is a bed_mesh enabled and a zero_reference_position set, we retrieve it to home on it
            # Else, we default to the center of the bed
            {% if not bed_mesh_enabled or not printer["configfile"].config["bed_mesh"]["zero_reference_position"] %}
                G0 X{x_position_center} Y{y_position_center} F{homing_travel_speed}
            {% else %}
                {% set ZRPx, ZRPy = printer["configfile"].config["bed_mesh"]["zero_reference_position"].split(',')|map('trim')|map('float') %}
                G0 X{ZRPx} Y{ZRPy} F{homing_travel_speed}
            {% endif %}

        # Else, go to the Z endstop physical pin
        {% else %}
            _GOTO_Z_PROBE
        {% endif %}

        G28 Z0

        G91
        {% if printer["configfile"].settings["stepper_z"]["homing_positive_dir"] == False %}
            G0 Z{homing_zhop} F{z_drop_speed} # small Z hop to avoid grinding the bed (as we should be close to Z0 right now)
        {% elif printer["configfile"].settings["stepper_z"]["homing_positive_dir"] == True %}
            G0 Z-{homing_zhop} F{z_drop_speed} # small Z move in the opposite direction to avoid staying on the endstop (not dangerous since we should be at Z max)
        {% endif %}
        G90

        # if voron tap, restore original temperature
        # if dockable probe as virtual endstop, then dock the probe
        {% if probe_type_enabled == "vorontap" or probe_type_enabled == "dockable_virtual" %}
            _DEACTIVATE_PROBE
        {% endif %}
    {% endif %}

    {% if probe_type_enabled == "dockable" or probe_type_enabled == "dockable_virtual" %}
        _CHECK_PROBE action=query
    {% endif %}

    # Reset acceleration values to what it was before
    SET_VELOCITY_LIMIT ACCEL={saved_accel}

    {% if probe_type_enabled == "dockable" or probe_type_enabled == "dockable_virtual" %}
        _EXIT_POINT FUNCTION=homing_override
    {% endif %}

    {% if status_leds_enabled %}
        _STATUS_LEDS COLOR="READY"
    {% endif %}


[gcode_macro _GOTO_Z_PROBE]
description: Move to z probe avoiding the probe dock
gcode:
    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}

    # If the auto z calibration plugin is enabled, then we use the z endstop coordinates set in its config section [z_calibration]
    # Else we fall back on the variable_zendstop_position set in the variables.cfg file
    {% set zcalib_plugin_enabled = printer["gcode_macro _USER_VARIABLES"].zcalib_plugin_enabled %}
    {% if zcalib_plugin_enabled %}
        {% set z_endstop_x, z_endstop_y = printer["configfile"].config["z_calibration"]["nozzle_xy_position"].split(',')|map('trim')|map('float') %}
    {% else %}
        {% set z_endstop_x, z_endstop_y = printer["gcode_macro _USER_VARIABLES"].zendstop_position|map('float') %}
    {% endif %}

    {% set homing_travel_speed = printer["gcode_macro _USER_VARIABLES"].homing_travel_speed|float * 60 %}

    SAVE_GCODE_STATE NAME=goto_ZProbe
    G90

    # For TAP probes, no dock avoidance needed - go directly to Z endstop position
    G0 X{z_endstop_x} Y{z_endstop_y} F{homing_travel_speed}

    RESTORE_GCODE_STATE NAME=goto_ZProbe