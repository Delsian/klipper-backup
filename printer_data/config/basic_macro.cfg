#####################################################################
# 	Macro
#####################################################################
#
#   This section contains basic macros that needed in several other
#   files. Getting them all to a single place should help to only
#   use what needed without hunting down several other files.
#
#####################################################################
##  Clear display output after Duration in seconds
##  Use: UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
[delayed_gcode _CLEAR_DISPLAY]
gcode:
  M117

[gcode_macro M486]
gcode: # Do nothing.

## Reset SD File after Print_END or CANCEL_PRINT
## This will avoid the reprint option in Mainsail after a print is done
[delayed_gcode _DELAY_SDCARD_RESET_FILE]
gcode:
  SDCARD_RESET_FILE

[gcode_macro DIRECT_MOVE]
gcode:
  {% set out_param = ["G0"] %}
  {% set _dummy = out_param.append("X%s" % params.X) if params.X %}
  {% set _dummy = out_param.append("Y%s" % params.Y) if params.Y %}
  {% set _dummy = out_param.append("Z%s" % params.Z) if params.Z %}
  {% set _dummy = out_param.append("E%s" % params.E) if params.E %}
  {% set _dummy = out_param.append("F%s" % params.F) if params.F %}
  {out_param|join(" ")}

##  action_respond_info will be always executed at the beginning of an macro evaluation.
##  Use _PRINT_AR if you need the order of several console outputs in the order given by the macro
##  Use: _PRINT_AR T="QGL forced by PRINT_START"
[gcode_macro _PRINT_AR]
description: Helper: Action response
gcode:
  {% if params.SHOW_LCD|default('false') == 'true' %} M117 {params.T} {% endif %}
  {action_respond_info(params.T)}

[gcode_macro M115]
description: Print host and mcu version
rename_existing: M115.1
gcode:
  {% set out = ['mcu build version:'] %}
  {% for name1 in printer %}
    {% for name2 in printer[name1] %}
      {% if name2 is in ['mcu_version'] %}
        {% set _dummy = out.append("%s: %s" % (name1, printer[name1][name2])) %}
      {% endif %}
    {% endfor %}
  {% endfor %}
  {action_respond_info(out|join("\n"))}
  M115.1

[homing_override]
axes: z
gcode:
  {% set user = printer['gcode_macro _USER_VARIABLE'] %}
  {% set home_x, home_y, home_z = False, False, False %} ; define what axes need to be homed
  {% if params.X is not defined and params.Y is not defined and params.Z is not defined %} ; G28
    {% set home_x, home_y, home_z = True, True, True %}
  {% else %}
    {% if params.X is defined %}{% set home_x = True %}{% endif %}
    {% if params.Y is defined %}{% set home_y = True %}{% endif %}
    {% if params.Z is defined %}
      {% if 'x' not in printer.toolhead.homed_axes %}{% set home_x = True %}{% endif %} ; check if homed
      {% if 'y' not in printer.toolhead.homed_axes %}{% set home_y = True %}{% endif %} ; check if homed
      {% set home_z = True %}
    {% endif %}
  {% endif %}
  G0 Z{user.homing.z_endstop.hop} F{user.speed.z_hop} ; lift nozzle
  {% if home_x %} G28 X   {% endif %}                 ; home X
  {% if home_y %} G28 Y   {% endif %}                 ; home Y
  {% if home_z %} _HOME_Z {% endif %}                 ; home Z

[gcode_macro _HOME_Z]
description: Helper: z homing
variable_calibrate_z_next: False
gcode:
  {% set user = printer['gcode_macro _USER_VARIABLE'] %}
  ; use -10 as default to insure it error out in case the variable is not existing
  {% set z_endstop = user.homing.z_endstop|default({'x':-10,'y':-10,'z':0, 'hop':0}) %}
  G90                                                     ; absolute position
  G0 X{z_endstop.x} Y{z_endstop.y} F{user.speed.travel}   ; move to endstop position
  G28 Z                                                   ; home Z
  G0 Z{z_endstop.z} F{user.speed.z_hop/3}                 ; lift toolhead to stop pressing on the pin
  {% if calibrate_z_next %}
    SET_GCODE_VARIABLE MACRO=_HOME_Z VARIABLE=calibrate_z_next VALUE=False
  {% else %}
    _SET_Z_CURRENT                                        ; set Z current back to cfg value
    G0 Z{user.z_hop} F{user.speed.z_hop}                  ; lift toolhead
  {% endif %}
  {% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %} ; set it back to relative
