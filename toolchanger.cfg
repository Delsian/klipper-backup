[toolchanger]
# save_current_tool: false
# initialize_gcode: 
  #  Gcode to run on initialize. Typically used for homing any motors, or 
  #  reselecting saved tool.
# initialize_on: first-use
  # When this toolchanger gets initialized.
  #  - manual: only when INITIALIZE_TOOLCHANGER is called.
  #  - home: when homing the printer.
  #  - first-use: on first toolchange command.
# verify_tool_pickup: True
  # If tool detection is available, will verify tool presence after pickp_gcode
require_tool_present: False
# uses_axis: xyz 
  # Axis used by the tool change process
# on_axis_not_homed: abort
  # When required axis are not homed
  # - abort: aborts the command
  # - home: attempts to home the axis
# params_*: 
  # Extra params to pass to pickup/dropoff gcode. Accessible in the gcode via
  # `toolchanger.params_name`.
  # Also will be copied to any tools for this toolchanger with local
  # values overriding. 
# before_change_gcode:
  # Common gcode to run before any tool change   
# after_change_gcode:
  # Common gcode to run after any tool change.
  # EG: To set custom input shaping, accelerations, etc.  
# error_gcode:
  # If specified, this gcode is run on failures instead of erroring out Klipper 
  # Typical use would be to pause the print and put INITIALIZE_TOOLCHANGER in the resume macro to reset toolchanger.
# recover_gcode:
  # Experimental, if specified, this gcode is run on `INITIALIZE_TOOLCHANGER RECOVER=1` to recover the position.
  # Should not generally be necessary, but adds optional extra control.
# parent_tool:
  # Name of a parent tool. Marks this toolchanger as a child, meaning the parent tool
  # will be selected in order to select any tool attached to this.
  # Can be used for chaining multiple filament/tool changing techniques,
  # like IDEX plus an MMU attached to one of the hotends.
# parent_mounting_mode: parent-first 
  # How to mount parent when the tool is selected:
  # - parent-first - mount parent and then child
  # - child-first - mount child before parent can be mounted
# parent_unmounting_mode: lazy 
  # How to unmount parent when the tool is deselected:
  # - child-first - unmount child and then parent
  # - parent-first - unmount parent and then child
  # - lazy - no dot unmount the child unless a needed to mount a sibling
# transfer_fan_speed: True
  # When tre, fan speed is transferred during toolchange. When false, fan speeds are not changed during toolchange.  

[gcode_macro _ACTIVATE_PROBE]
description: Put the machine in a state being able to probe
gcode:
    {% set probe_type_enabled = printer["gcode_macro _USER_VARIABLES"].probe_type_enabled %}
    {% set tap_max_probing_temp = printer["gcode_macro _USER_VARIABLES"].tap_max_probing_temp|float %}

    # For toolchanger with TAP probes
    {% if probe_type_enabled == "vorontap" %}
        {% if not printer.toolchanger.tool %}
            { action_raise_error("No active tool selected - cannot activate probe") }
        {% endif %}
        
        {% set tool_num = printer.toolchanger.tool %}
        {% set extruder_name = "extruder" if tool_num == 0 else "extruder" + tool_num|string %}
        {% set ACTUAL_TEMP = printer[extruder_name].temperature %}
        {% set TARGET_TEMP = printer[extruder_name].target %}

        {% if TARGET_TEMP > tap_max_probing_temp %}
            { action_respond_info('Lowering %s temperature to %dÂ°C for TAP probing' % (extruder_name, tap_max_probing_temp)) }
            M106 S255 ; 100% the part cooling fan to help the extruder cooling
            M109 S{tap_max_probing_temp}
            M106 S0   ; Stop the part cooling fan
        {% else %}
            # Temperature target is already low enough, but nozzle may still be too hot
            {% if ACTUAL_TEMP > tap_max_probing_temp + 3 %}
                M106 S255 ; 100% the part cooling fan to help the extruder cooling
                TEMPERATURE_WAIT SENSOR={extruder_name} MAXIMUM={tap_max_probing_temp}
                M106 S0   ; Stop the part cooling fan
            {% endif %}
        {% endif %}
    {% endif %}

[gcode_macro _DEACTIVATE_PROBE]
description: Revert the machine to a normal state after probing
gcode:
    {% set probe_type_enabled = printer["gcode_macro _USER_VARIABLES"].probe_type_enabled %}
    {% set tap_deactivation_zhop = printer["gcode_macro _USER_VARIABLES"].tap_deactivation_zhop %}
    {% set Sz = printer["gcode_macro _USER_VARIABLES"].z_drop_speed * 60 %}

    {% if probe_type_enabled == "vorontap" %}
        # Small Z hop to avoid restoring the temperature directly on the PEI
        {% set z_safe = printer.toolhead.position.z + tap_deactivation_zhop %}
        {% if z_safe > printer.toolhead.axis_maximum.z %}
            {% set z_safe = printer.toolhead.axis_maximum.z %}
        {% endif %}
        G90
        G1 Z{z_safe} F{Sz}
    {% endif %}

[gcode_macro PROBE_CALIBRATE]
rename_existing: BASE_PROBE_CALIBRATE
description: Calibrate the active tool's probe
gcode:
    {% if not printer.toolchanger.tool %}
        { action_raise_error("No active tool selected for probe calibration") }
    {% endif %}
    
    {% set tool_number = printer.toolchanger.tool %}
    ACTIVATE_PROBE TOOL={tool_number}
    BASE_PROBE_CALIBRATE {% for p in params %}{'%s=%s ' % (p, params[p])}{% endfor %}
    DEACTIVATE_PROBE TOOL={tool_number}

[gcode_macro PROBE_ACCURACY]
rename_existing: BASE_PROBE_ACCURACY
description: Test the active tool's probe accuracy
gcode:
    {% if not printer.toolchanger.tool %}
        { action_raise_error("No active tool selected for probe accuracy test") }
    {% endif %}
    
    {% set tool_number = printer.toolchanger.tool %}
    ACTIVATE_PROBE TOOL={tool_number}
    BASE_PROBE_ACCURACY {% for p in params %}{'%s=%s ' % (p, params[p])}{% endfor %}
    DEACTIVATE_PROBE TOOL={tool_number}