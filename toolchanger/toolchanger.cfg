[toolchanger]
# save_current_tool: false
# initialize_gcode: 
  #  Gcode to run on initialize. Typically used for homing any motors, or 
  #  reselecting saved tool.
initialize_on: first-use
  # When this toolchanger gets initialized.
  #  - manual: only when INITIALIZE_TOOLCHANGER is called.
  #  - home: when homing the printer.
  #  - first-use: on first toolchange command.
verify_tool_pickup: True
  # If tool detection is available, will verify tool presence after pickp_gcode
require_tool_present: False
# uses_axis: xyz 
  # Axis used by the tool change process
# on_axis_not_homed: abort
  # When required axis are not homed
  # - abort: aborts the command
  # - home: attempts to home the axis
# params_*: 
  # Extra params to pass to pickup/dropoff gcode. Accessible in the gcode via
  # `toolchanger.params_name`.
  # Also will be copied to any tools for this toolchanger with local
  # values overriding. 
# before_change_gcode:
  # Common gcode to run before any tool change   
# after_change_gcode:
  # Common gcode to run after any tool change.
  # EG: To set custom input shaping, accelerations, etc.  
# error_gcode:
  # If specified, this gcode is run on failures instead of erroring out Klipper 
  # Typical use would be to pause the print and put INITIALIZE_TOOLCHANGER in the resume macro to reset toolchanger.
# recover_gcode:
  # Experimental, if specified, this gcode is run on `INITIALIZE_TOOLCHANGER RECOVER=1` to recover the position.
  # Should not generally be necessary, but adds optional extra control.
# parent_tool:
  # Name of a parent tool. Marks this toolchanger as a child, meaning the parent tool
  # will be selected in order to select any tool attached to this.
  # Can be used for chaining multiple filament/tool changing techniques,
  # like IDEX plus an MMU attached to one of the hotends.
# parent_mounting_mode: parent-first 
  # How to mount parent when the tool is selected:
  # - parent-first - mount parent and then child
  # - child-first - mount child before parent can be mounted
# parent_unmounting_mode: lazy 
  # How to unmount parent when the tool is deselected:
  # - child-first - unmount child and then parent
  # - parent-first - unmount parent and then child
  # - lazy - no dot unmount the child unless a needed to mount a sibling
# transfer_fan_speed: True
  # When tre, fan speed is transferred during toolchange. When false, fan speeds are not changed during toolchange.  

[gcode_macro _DEBUG_TOOLCHANGER]
gcode:
    RESPOND MSG="Current tool: {printer.toolchanger.tool}"
    RESPOND MSG="Tool selected: {printer.toolchanger.tool is not none}"
    {% if printer.toolchanger.tool is not none %}
        RESPOND MSG="Tool number: {printer.toolchanger.tool}"
    {% endif %}

[gcode_macro _DEBUG_PROBES]
gcode:
    {% for item in printer %}
        {% if 'tool_probe' in item %}
            RESPOND MSG="Found probe: {item}"
        {% endif %}
    {% endfor %}
    {% if printer.toolchanger.tool %}
        {% set current_tool = printer.toolchanger.tool %}
        RESPOND MSG="Current tool: {current_tool}"
        RESPOND MSG="Looking for probe: tool_probe {current_tool}"
    {% endif %}

[gcode_macro M104]
rename_existing: M104.1
description: [T<index>] [S<temperature>]
  Set tool temperature.
  T= Tool number, optional. If this parameter is not provided, the current tool is used.
  S= Target temperature
gcode:
  {% if params.T is defined %}
    {% set newparameters = "" %}
    {% set newparameters = newparameters ~ " T="~params.T %}
    {% if params.S is defined %}
      {% set newparameters = newparameters ~ " TARGET="~params.S %}
    {% endif %}
    SET_TOOL_TEMPERATURE{newparameters}
  {% else %}
    M104.1 {rawparams}
  {% endif %}

[gcode_macro M109]
rename_existing: M109.1
description: [T<index>] [S<temperature>]
  Set tool temperature and wait.
  T= Tool number, optional. If this parameter is not provided, the current tool is used.
  S= Target temperature
gcode:
  {% if params.T is defined %}
    {% set newparameters = "" %}
    {% set newparameters = newparameters ~ " T="~params.T %}
    {% if params.S is defined %}
      {% set newparameters = newparameters ~ " TARGET="~params.S %}
    {% endif %}
    SET_TOOL_TEMPERATURE WAIT=1 {newparameters}
  {% else %}
    M109.1 {rawparams}
  {% endif %}

[tool_probe_endstop]
  crash_gcode:
    RESPOND TYPE=error MSG='Tool not detected, expected {printer.toolchanger.tool_number}. Pausing the print.' 
    M84
    TURN_OFF_HEATERS

[gcode_macro _INITIALIZE_FROM_DETECTED_TOOL]
gcode:
  DETECT_ACTIVE_TOOL_PROBE
  _INITIALIZE_FROM_DETECTED_TOOL_IMPL

[gcode_macro _INITIALIZE_FROM_DETECTED_TOOL_IMPL]
gcode:
  {% if printer.tool_probe_endstop.active_tool_number | int == -1 %}
    RESPOND TYPE=error MSG='Failed to detect active tool'
    PAUSE
  {% else %}
    { action_respond_info('initialize from detected tool')}
    INITIALIZE_TOOLCHANGER T={printer.tool_probe_endstop.active_tool_number}
  {% endif %}

# per tool probe is not yet integrated with toolchanger tool detection. This macro adds a stopgap.
[gcode_macro VERIFY_TOOL_DETECTED]
rename_existing: VERIFY_TOOL_DETECTED_ORIG
gcode:
    G4 P200
    DETECT_ACTIVE_TOOL_PROBE
    _STOP_IF_INCORRECT_TOOL {rawparams}

[gcode_macro _STOP_IF_INCORRECT_TOOL]
gcode:
    {% if T in params and printer.tool_probe_endstop.active_tool_number | int != params.T | int %}
       RESPOND TYPE=error MSG='Tool not detected, expected {params.T}. Pausing the print.'
       M112
    {% elif printer.tool_probe_endstop.active_tool_number | int == -1%}
       RESPOND TYPE=error MSG='No tool detected. Pausing the print.'
       M112
    {% endif %}

; Depending on the selected tool at the time of homing, the physical Z endstop position is offset.
; This corrects for that using current tool offset.
[gcode_macro _ADJUST_Z_HOME_FOR_TOOL_OFFSET]
gcode:
      G90 ; absolute mode
      G0 Z10 F1000
      {% set tool = printer.toolchanger.tool %}
      {% if tool %}
         {% set tool_z_offset = printer[tool].gcode_z_offset %}
         {% set probe_z_offset = printer.tool_probe_endstop.active_tool_probe_z_offset %}
         SET_KINEMATIC_POSITION Z={10.0+tool_z_offset|float+probe_z_offset|float}
      {% endif %}

[gcode_macro _APPLY_ACTIVE_TOOL_GCODE_OFFSETS]
gcode:
    ; Apply gcode offsets
    {% set tool = printer.toolchanger.tool %}
    {% if tool %}
      SET_GCODE_OFFSET X={printer[tool].gcode_x_offset} Y={printer[tool].gcode_y_offset} Z={printer[tool].gcode_z_offset}
    {% endif %}

[gcode_macro _TAP_PROBE_ACTIVATE]
description: Ensure safe temp for bed probing
gcode:
    {% set max_temp = 150 %}
    {% set actual_temp = printer[params.HEATER].temperature %}
    {% set target_temp = printer[params.HEATER].target %}
    {% if target_temp > max_temp %}
        { action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (target_temp, max_temp)) }
        SET_HEATER_TEMPERATURE HEATER={params.HEATER} TARGET={ max_temp|int - 5 }
    {% endif %}
    # Temperature target is already low enough, but nozzle may still be too hot.
    {% if actual_temp > max_temp  + 2 %}
        { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (actual_temp, max_temp)) }
        TEMPERATURE_WAIT SENSOR={params.HEATER} MAXIMUM={ max_temp }
    {% endif %}
