[toolchanger]
# params_*: 
  # Extra params to pass to pickup/dropoff gcode. Accessible in the gcode via
  # `toolchanger.params_name`.
  # Also will be copied to any tools for this toolchanger with local
  # values overriding. 

  params_safe_y: 201 # 41+150+10
  params_close_y: 91
  params_fast_speed: 12000 # Default is slow moves, change this to go as Go as fast as we can
  params_fast_speed_xy: 18000
  params_path_speed: 1000 #2400 #1200 # Move speed for for the actual change 1500=40mm/s, increase this to go as fast as you can

  params_dropoff_path: [{'y':9.5 ,'z':4}, {'y':9.5, 'z':2}, {'y':5.5, 'z':0}, {'z':0, 'y':0, 'f':0.5}, {'z':-10, 'y':0}, {'z':-10, 'y':16}]
  params_pickup_path: [{'z':-10, 'y':16}, {'z':-10, 'y':0}, {'z':0, 'y':0, 'f':0.5}, {'y':5.5, 'z':0}, {'y':9.5, 'z':2}, {'y':9.5 ,'z':4, 'verify':1}]

  # save_current_tool: false
  # initialize_gcode: 
  #  Gcode to run on initialize. Typically used for homing any motors, or 
  #  reselecting saved tool.
  initialize_on: first-use
  # When this toolchanger gets initialized.
  #  - manual: only when INITIALIZE_TOOLCHANGER is called.
  #  - home: when homing the printer.
  #  - first-use: on first toolchange command.
  verify_tool_pickup: True
  # If tool detection is available, will verify tool presence after pickp_gcode
  require_tool_present: False

  # uses_axis: xyz 
  # Axis used by the tool change process

  # on_axis_not_homed: abort
  # When required axis are not homed
  # - abort: aborts the command
  # - home: attempts to home the axis

  # Common gcode to run before any tool change 
  before_change_gcode:
    {% set tn = "T"+(tool.tool_number|string) %}
    {% if printer["gcode_macro " + tn ] %}
       SET_GCODE_VARIABLE MACRO={tn} VARIABLE=color VALUE="''"
    {% endif %}

  # Common gcode to run after any tool change.
  # EG: To set custom input shaping, accelerations, etc.  
  after_change_gcode:
    {% set tn = "T"+(tool.tool_number|string) %}
    {% if printer["gcode_macro " + tn ] %}
       SET_GCODE_VARIABLE MACRO={tn} VARIABLE=color VALUE="'c44'"
    {% endif %}
    ### load Input Shaper frequency, type and damping ratio 
    ### (if none or some params_input_shaper_* are set in tool, use default input_shaper_params)
    {% if tool.params_input_shaper_freq_x and tool.params_input_shaper_freq_y %}
      {% if tool.params_input_shaper_type_x and tool.params_input_shaper_type_y %}
        {% if tool.params_input_shaper_damping_ratio_x and tool.params_input_shaper_damping_ratio_y %}
          SET_INPUT_SHAPER SHAPER_FREQ_X={tool.params_input_shaper_freq_x} SHAPER_FREQ_Y={tool.params_input_shaper_freq_y} SHAPER_TYPE_X={tool.params_input_shaper_type_x} SHAPER_TYPE_Y={tool.params_input_shaper_type_y} DAMPING_RATIO_X={tool.params_input_shaper_damping_ratio_x} DAMPING_RATIO_Y={tool.params_input_shaper_damping_ratio_y}
        {% else %}
          SET_INPUT_SHAPER SHAPER_FREQ_X={tool.params_input_shaper_freq_x} SHAPER_FREQ_Y={tool.params_input_shaper_freq_y} SHAPER_TYPE_X={tool.params_input_shaper_type_x} SHAPER_TYPE_Y={tool.params_input_shaper_type_y} DAMPING_RATIO_X={params_input_shaper_damping_ratio_x} DAMPING_RATIO_Y={params_input_shaper_damping_ratio_y}
        {% endif %}
      {% else %}
        SET_INPUT_SHAPER SHAPER_FREQ_X={tool.params_input_shaper_freq_x} SHAPER_FREQ_Y={tool.params_input_shaper_freq_y} SHAPER_TYPE_X={params_input_shaper_type_x} SHAPER_TYPE_Y={params_input_shaper_type_y} DAMPING_RATIO_X={params_input_shaper_damping_ratio_x} DAMPING_RATIO_Y={params_input_shaper_damping_ratio_y}
      {% endif %}
    {% else %}
      SET_INPUT_SHAPER SHAPER_FREQ_X={params_input_shaper_freq_x} SHAPER_FREQ_Y={params_input_shaper_freq_y} SHAPER_TYPE_X={params_input_shaper_type_x} SHAPER_TYPE_Y={params_input_shaper_type_y} DAMPING_RATIO_X={params_input_shaper_damping_ratio_x} DAMPING_RATIO_Y={params_input_shaper_damping_ratio_y}
    {% endif %}

  # If specified, this gcode is run on failures instead of erroring out Klipper 
  # Typical use would be to pause the print and put INITIALIZE_TOOLCHANGER in the resume macro to reset toolchanger.
  error_gcode:
    PAUSE

  transfer_fan_speed: True
  # When tre, fan speed is transferred during toolchange. When false, fan speeds are not changed during toolchange.  

  dropoff_gcode:
    {% set x = tool.params_park_x|float %}
    {% set y = tool.params_park_y|float %}
    {% set z = tool.params_park_z|float %}
    {% set fast = tool.params_fast_speed|float %}
    {% set fast_xy = tool.params_fast_speed_xy|float %}
    {% set path = tool.params_dropoff_path %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
    {% set cur_z = printer.toolhead.position[2]|float %}
    RESPOND TYPE=echo MSG='Dropping off {tool.name}'
    STATUS_DOCKING T={tool.tool_number|string}
    
    #UP STOP_TOOL_PROBE_CRASH_DETECTION
    G90
    ; Move 1 mm up to avoid crashing into things
    G0 Z{ [cur_z+1.0, max_z]|min } F{fast}
    #   ##############  Move up to the dock  ##############
    ROUNDED_G0 Y={tool.params_safe_y} D=20 F={fast_xy}
    ROUNDED_G0 X={x} D=150 F={fast_xy}
    ROUNDED_G0 Z={z + path[0]['z']|float} D=20 F={fast}
    ROUNDED_G0 Y={y + path[0]['y']|float} D=0 F={fast_xy}
    
    #  ############## Run the path ##############
    {% for pos in path %}
      {% set speed = tool.params_path_speed|float * (pos.get('f', 1.0)|float) %}
      G0 {% if 'x' in pos %}X{x + pos['x']|float}{% endif %} {% if 'y' in pos %}Y{y + pos['y']|float}{% endif %} {% if 'z' in pos %}Z{z + pos['z']|float }{% endif %} F{speed}
    {% endfor %}

    {% if pickup_tool is none %}
      G0 Y{tool.params_safe_y} F{fast}
    {% endif %}    
    
    #M400 
    STATUS_READY T={tool.tool_number|string}
    # take a frame while the tool is out of the way
    # TIMELAPSE_TAKE_FRAME

  pickup_gcode:
    {% set x = tool.params_park_x|float %}
    {% set y = tool.params_park_y|float %}
    {% set z = tool.params_park_z|float %}
    {% set fast = tool.params_fast_speed|float %}
    {% set fast_xy = tool.params_fast_speed_xy|float %}
    {% set path = tool.params_pickup_path %}
    #UP {% set path = tool['params_' ~ tool.params_type ~ '_path'] %}
    RESPOND TYPE=echo MSG='Picking up {tool.name}'
    STATUS_DOCKING T={tool.tool_number|string}
    
    G90

    #   ##############  Fast to the last point  ##############
    {% if dropoff_tool is none and pickup_tool is not none %}
      ROUNDED_G0 Y={tool.params_safe_y} D=20 F={fast}
    {% else %}
      ROUNDED_G0 Y={tool.params_close_y} F={fast} D=5
    {% endif %}

    ROUNDED_G0 X={x} Z={z + path[0]['z']|float} F={fast_xy} D=5
    ROUNDED_G0 Y={y + path[0]['y']|float} F={fast_xy} D=0
    
    # Wait for temp before actually picking up the tool, while the nozzle is resting on it's pad.
    {% if tool.extruder %}
      TEMPERATURE_WAIT SENSOR={printer.toolhead.extruder} MINIMUM={printer[tool.extruder].target-5} #add 5deg deadband
      # Do not use M109 because tool mapping will map the tool number, instead use the temperature wait
      #M109 T{tool.tool_number} S{printer[tool.extruder].target|int}
    {% endif %}

    # Run the path
    {% for pos in path %}
      {% set speed = tool.params_path_speed|float * (pos.get('f', 1.0)|float) %}
      G0 {% if 'x' in pos %}X{x + pos['x']|float}{% endif %} {% if 'y' in pos %}Y{y + pos['y']|float}{% endif %} {% if 'z' in pos %}Z{z + pos['z']|float }{% endif %} F{speed}
      {% if 'verify' in pos %}
        VERIFY_TOOL_DETECTED T={tool.tool_number} ASYNC=0  #### it will verify after pickup anyway and this introduces a noticeable hesitation (or does it?? active probe doesn't seem to change)
      {% endif %}
    {% endfor %}    
    
    # Restore the position with smooth rounded move.
    ROUNDED_G0 Y={tool.params_safe_y} F={fast_xy} D=20
    
    {% if 'Z' in restore_position %}
      #Travel with Z 5 higher to the restore position
      ROUNDED_G0 Z={restore_position.Z + 5} F={fast} D=150
    {% endif %}
    {% if 'X' in restore_position %}
      ROUNDED_G0 X={restore_position.X} F={fast_xy} D=1000
    {% endif %}
    {% if 'Y' in restore_position %}
      ROUNDED_G0 Y={restore_position.Y} F={fast_xy} D=0
    {% endif %}
    {% if 'Z' in restore_position %}
      # And then go to the actual restore Z. This prevents dragging over the print
      ROUNDED_G0 Z={restore_position.Z} F={fast} D=150
    {% endif %}
    ROUNDED_G0 D=0
    
    M400
    {% if printer["gcode_macro PRINT_START"].printing %}
      _STATUS_PRINTING T={tool.tool_number|string}
    {% else %}
      _STATUS_READY T={tool.tool_number|string}
    {% endif %}    

[gcode_macro RESUME]
rename_existing: RESUME_BASE
gcode:
  _INITIALIZE_FROM_DETECTED_TOOL
  VERIFY_TOOL_DETECTED
  RESUME_BASE
  
[gcode_macro TOOL_ALIGN_START]
gcode:
    INITIALIZE_TOOLCHANGER # Detect current tool
    _TOOL_ALIGN_START

[gcode_macro _TOOL_ALIGN_START]
gcode:
    {% set tool = printer[printer.toolchanger.tool] %}
    SET_TOOL_PARAMETER PARAMETER='params_path_speed' VALUE=300
    SET_GCODE_OFFSET X=0 Y=0 Z=0
    G0 Y{tool.params_safe_y} F{tool.params_fast_speed}
    G0 X{tool.params_park_x} Z{tool.params_park_z}
    G0 Y{tool.params_park_y|float + 100.0}

[gcode_macro TOOL_ALIGN_TEST]
gcode:
    {% set curpos = printer.gcode_move.gcode_position %}
    {% if curpos[1] > 0 %}
      # Check if Y is not too far, to very unrealistic tests.
      RESPOND TYPE=error MSG='Test aborted. Tool too far away from the dock.'
    {% else %}
      INITIALIZE_TOOLCHANGER # Detect current tool
      SET_GCODE_OFFSET X=0 Y=0 Z=0
      SET_TOOL_PARAMETER PARAMETER='params_park_x' VALUE={curpos[0]}
      SET_TOOL_PARAMETER PARAMETER='params_park_y' VALUE={curpos[1]}
      SET_TOOL_PARAMETER PARAMETER='params_park_z' VALUE={curpos[2]}
      TEST_TOOL_DOCKING RESTORE_AXIS=XYZ
    {% endif %}

[gcode_macro TOOL_ALIGN_DONE]
gcode:
    {% set tool = printer[printer.toolchanger.tool] %}
    {% set curpos = printer.gcode_move.gcode_position %}
    SET_TOOL_PARAMETER PARAMETER='params_park_x' VALUE={curpos[0]}
    SET_TOOL_PARAMETER PARAMETER='params_park_y' VALUE={curpos[1]}
    SET_TOOL_PARAMETER PARAMETER='params_park_z' VALUE={curpos[2]}
    SAVE_TOOL_PARAMETER PARAMETER='params_park_x'
    SAVE_TOOL_PARAMETER PARAMETER='params_park_y'
    SAVE_TOOL_PARAMETER PARAMETER='params_park_z'
    RESET_TOOL_PARAMETER PARAMETER='params_path_speed'
    G0 Y{tool.params_safe_y} F{tool.params_fast_speed}

[gcode_macro _DEBUG_TOOLCHANGER]
gcode:
    RESPOND MSG="Current tool: {printer.toolchanger.tool}"
    RESPOND MSG="Tool selected: {printer.toolchanger.tool is not none}"
    {% if printer.toolchanger.tool is not none %}
        RESPOND MSG="Tool number: {printer.toolchanger.tool}"
    {% endif %}

[gcode_macro _DEBUG_PROBES]
gcode:
    {% for item in printer %}
        {% if 'tool_probe' in item %}
            RESPOND MSG="Found probe: {item}"
        {% endif %}
    {% endfor %}
    {% if printer.toolchanger.tool %}
        {% set current_tool = printer.toolchanger.tool %}
        RESPOND MSG="Current tool: {current_tool}"
        RESPOND MSG="Looking for probe: tool_probe {current_tool}"
    {% endif %}

; Depending on the selected tool at the time of homing, the physical Z endstop position is offset.
; This corrects for that using current tool offset.
[gcode_macro _ADJUST_Z_HOME_FOR_TOOL_OFFSET]
gcode:
      G90 ; absolute mode
      G0 Z10 F1000
      {% set tool = printer.toolchanger.tool %}
      {% if tool %}
         {% set tool_z_offset = printer[tool].gcode_z_offset %}
         {% set probe_z_offset = printer.tool_probe_endstop.active_tool_probe_z_offset %}
         SET_KINEMATIC_POSITION Z={10.0+tool_z_offset|float+probe_z_offset|float}
      {% endif %}

[gcode_macro _APPLY_ACTIVE_TOOL_GCODE_OFFSETS]
gcode:
    ; Apply gcode offsets
    {% set tool = printer.toolchanger.tool %}
    {% if tool %}
      SET_GCODE_OFFSET X={printer[tool].gcode_x_offset} Y={printer[tool].gcode_y_offset} Z={printer[tool].gcode_z_offset}
    {% endif %}

[gcode_macro _TAP_PROBE_ACTIVATE]
description: Ensure safe temp for bed probing
gcode:
    {% set max_temp = 150 %}
    {% set actual_temp = printer[params.HEATER].temperature %}
    {% set target_temp = printer[params.HEATER].target %}
    {% if target_temp > max_temp %}
        { action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (target_temp, max_temp)) }
        SET_HEATER_TEMPERATURE HEATER={params.HEATER} TARGET={ max_temp|int - 5 }
    {% endif %}
    # Temperature target is already low enough, but nozzle may still be too hot.
    {% if actual_temp > max_temp  + 2 %}
        { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (actual_temp, max_temp)) }
        TEMPERATURE_WAIT SENSOR={params.HEATER} MAXIMUM={ max_temp }
    {% endif %}
